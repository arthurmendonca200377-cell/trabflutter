import 'package:flutter/material.dart';

// Ponto de entrada da aplicação.
void main() {
  runApp(const CalculadoraApp());
}

// Widget principal da aplicação, responsável pela estrutura.
class CalculadoraApp extends StatelessWidget {
  const CalculadoraApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calculadora de IMC',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.teal,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const CalculadoraIMC(),
    );
  }
}

// StatefulWidget para gerenciar o estado mutável da calculadora.
class CalculadoraIMC extends StatefulWidget {
  const CalculadoraIMC({super.key});

  @override
  State<CalculadoraIMC> createState() => _CalculadoraIMCState();
}

class _CalculadoraIMCState extends State<CalculadoraIMC> {
  // Controladores para pegar o texto dos campos de entrada.
  final TextEditingController _pesoController = TextEditingController();
  final TextEditingController _alturaController = TextEditingController();

  // Variáveis para armazenar o resultado e a classificação.
  double _imcResultado = 0.0;
  String _classificacao = '';
  String _mensagemErro = '';

  // Função para calcular o IMC.
  double calcularIMC(double peso, double altura) {
    if (altura <= 0) {
      return 0.0; // Evita divisão por zero.
    }
    return peso / (altura * altura);
  }

  // Função para classificar o IMC.
  String classificarIMC(double imc) {
    if (imc == 0.0) {
      return '';
    } else if (imc < 18.5) {
      return 'Abaixo do peso';
    } else if (imc >= 18.5 && imc < 24.9) {
      return 'Normal';
    } else if (imc >= 24.9 && imc < 29.9) {
      return 'Sobrepeso';
    } else {
      return 'Obesidade';
    }
  }

  // Função para lidar com a ação do botão.
  void _calcular() {
    setState(() {
      _mensagemErro = '';
      _imcResultado = 0.0;
      _classificacao = '';

      try {
        final double peso = double.parse(_pesoController.text);
        final double altura = double.parse(_alturaController.text);

        if (peso <= 0 || altura <= 0) {
          _mensagemErro = 'Por favor, insira valores positivos para peso e altura.';
          return;
        }

        final imc = calcularIMC(peso, altura);
        _imcResultado = imc;
        _classificacao = classificarIMC(imc);
      } catch (e) {
        _mensagemErro = 'Entrada inválida. Use apenas números.';
      }
    });
  }

  @override
  void dispose() {
    _pesoController.dispose();
    _alturaController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Calculadora de IMC'),
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            const Text(
              'Insira seu peso e altura para calcular o IMC.',
              style: TextStyle(fontSize: 18, color: Colors.black54),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            TextField(
              controller: _pesoController,
              keyboardType: TextInputType.number,
              decoration: const InputDecoration(
                labelText: 'Peso (kg)',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _alturaController,
              keyboardType: TextInputType.number,
              decoration: const InputDecoration(
                labelText: 'Altura (m)',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _calcular,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding: const EdgeInsets.symmetric(vertical: 16.0),
              ),
              child: const Text(
                'Calcular IMC',
                style: TextStyle(fontSize: 18, color: Colors.white),
              ),
            ),
            if (_mensagemErro.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 20.0),
                child: Text(
                  _mensagemErro,
                  style: const TextStyle(color: Colors.red, fontSize: 16),
                  textAlign: TextAlign.center,
                ),
              ),
            if (_imcResultado > 0)
              Padding(
                padding: const EdgeInsets.only(top: 20.0),
                child: Column(
                  children: <Widget>[
                    Text(
                      'Seu IMC é:',
                      style: TextStyle(
                          fontSize: 20, color: Colors.teal[800]),
                    ),
                    Text(
                      _imcResultado.toStringAsFixed(2),
                      style: const TextStyle(
                          fontSize: 60,
                          fontWeight: FontWeight.bold,
                          color: Colors.black),
                    ),
                    Text(
                      'Classificação: $_classificacao',
                      style: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }
}
